generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  THERAPIST
  ADMIN
}

model User {
  id                 String   @id @default(cuid())
  email              String   @unique
  username           String?
  password           String
  role               UserRole @default(USER)
  age                Int?
  nativeLanguage     String?
  avatar             String?
  biography          String?
  slug               String?
  confirmationToken  String?
  resetPasswordToken String?
  refreshToken       String?
  isActive           Boolean  @default(false)

  posts                 Post[]
  conversations         Conversation[] @relation("ConversationUsers")
  sentMessages          Message[]      @relation("SentMessages")
  receivedMessages      Message[]      @relation("ReceivedMessages")
  friendshipsSent       Friendship[]   @relation("friendshipsSent")
  friendshipsReceived   Friendship[]   @relation("friendshipsReceived")
  likes                 Like[]
  comments              Comment[]
  tags                  tag[]          @relation("UserTags")
  triggers              trigger[]      @relation("UserTriggers")
  reservations          Reservation[]  @relation("UserReservations")
  therapistReservations Reservation[]  @relation("TherapistReservations")
  reports               Report[]
  notifications         Notification[]
  lifeMoments           LifeMoment[]

  accessCode String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

model Post {
  id               String @id @default(cuid())
  content          String
  userId           String
  originalLanguage String
  emotion          String
  slug             String

  // Relation to the user who created the post
  user     User?     @relation(fields: [userId], references: [id])
  comments Comment[] // A post contains multiple comments
  tags     tag[]     @relation("PostTags")
  triggers trigger[] @relation("PostTriggers")
  likes    Like[] // A post can have multiple likes

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model tag {
  id   String @id @default(cuid())
  name String

  // Relation to the posts that have this tag
  posts Post[] @relation("PostTags")
  users User[] @relation("UserTags")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?
}

model trigger {
  id   String @id @default(cuid())
  name String

  // Relation to the posts that have this trigger
  posts Post[] @relation("PostTriggers")
  users User[] @relation("UserTriggers")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?
}

model Like {
  id        String  @id @default(cuid())
  userId    String
  postId    String?
  commentId String?

  // Relation to the user who liked the post or comment
  user    User     @relation(fields: [userId], references: [id])
  // Relation to the post that was liked
  post    Post?    @relation(fields: [postId], references: [id])
  // Relation to the comment that was liked
  comment Comment? @relation(fields: [commentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id       String  @id @default(cuid())
  content  String
  postId   String
  userId   String
  parentId String? // Optional field to reference the parent comment

  // Relation to the post the comment belongs to
  post    Post      @relation(fields: [postId], references: [id])
  // Relation to the user who created the comment
  user    User      @relation(fields: [userId], references: [id])
  // Self-referential relation to the parent comment
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  // Self-referential relation to the replies
  replies Comment[] @relation("CommentReplies")
  likes   Like[] // A comment can have multiple likes

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  senderName String
  content    String
  read       Boolean? @default(false)

  deletedBy String?

  // Relation to the conversation the message belongs to
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  // Relation to the user who sent the message
  sender         User         @relation("SentMessages", fields: [senderId], references: [id])
  // Relation to the user who received the message
  receiver       User         @relation("ReceivedMessages", fields: [receiverId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

enum ConversationType {
  PRIVATE
  GROUP
}

model Conversation {
  id               String           @id @default(cuid())
  users            User[]           @relation("ConversationUsers")
  conversationType ConversationType @default(PRIVATE)
  messages         Message[] // A conversation contains multiple messages
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  deletedAt        DateTime?
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

model Friendship {
  id          String           @id @default(cuid())
  requester   User             @relation("friendshipsSent", fields: [requesterId], references: [id])
  requesterId String
  receiver    User             @relation("friendshipsReceived", fields: [receiverId], references: [id])
  receiverId  String
  startedAt   DateTime?
  status      FriendshipStatus @default(PENDING)

  @@unique([requesterId, receiverId]) // Assure qu'il n'y ait qu'une seule relation d'amiti√© entre deux utilisateurs

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

enum ContentTypes {
  TEXT
  IMAGE
  VIDEO
  AUDIO
}

model LifeMoment {
  id        String    @id @default(cuid())
  content   String    @db.Text
  userId    String
  emotion   String
  slug      String
  contents  Content[]
  // Relation to the user who created the life moment
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Content {
  id           String     @id @default(cuid())
  lifeMomentId String
  type         String
  order        Int
  originalName String
  fileUrl      String     @unique
  content      String
  size         Int?
  duration     Int?
  lifeMoment   LifeMoment @relation(fields: [lifeMomentId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
}

model Reservation {
  id            String    @id @default(cuid())
  title         String
  date          DateTime
  startTime     DateTime
  endTime       DateTime
  videoCallLink String?
  isCancelled   Boolean   @default(false)
  user          User      @relation(name: "UserReservations", fields: [userId], references: [id])
  userId        String
  therapist     User      @relation(name: "TherapistReservations", fields: [therapistId], references: [id])
  therapistId   String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
}

enum TargetType {
  POST
  COMMENT
  USER
}

model Report {
  id               String     @id @default(cuid())
  reporterId       String
  targetId         String
  targetType       TargetType
  reason           String
  validatedByAdmin Boolean    @default(false)
  // Relation to the user who reported the content
  reporter         User       @relation(fields: [reporterId], references: [id])
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @default(now())
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  message   String
  // Relation to the user who receives the notification
  user      User             @relation(fields: [userId], references: [id])
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now())
}

enum NotificationType {
  MESSAGE
  FRIEND_REQUEST
  LIKE
  COMMENT
}
